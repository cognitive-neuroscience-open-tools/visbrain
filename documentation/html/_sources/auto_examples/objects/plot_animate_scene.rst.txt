
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/objects/plot_animate_scene.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_objects_plot_animate_scene.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_objects_plot_animate_scene.py:


Animate objects in the scene
============================

This example illustrate how to animate objects inside the scene. Note that
animations can only be used with 3D objects.

.. GENERATED FROM PYTHON SOURCE LINES 8-14

.. code-block:: Python

    import numpy as np

    from visbrain.objects import (BrainObj, SceneObj, SourceObj, ConnectObj)
    from visbrain.io import download_file



.. GENERATED FROM PYTHON SOURCE LINES 15-19

Download data and create the scene
##############################################################################
 The SceneObj is Matplotlib subplot like in which, you can add visbrain's
 objects. We first create the scene with a black background, a fixed size

.. GENERATED FROM PYTHON SOURCE LINES 19-34

.. code-block:: Python


    # Download intracranial EEG electodes
    mat = np.load(download_file('xyz_sample.npz', astype='example_data'))
    xyz, subjects = mat['xyz'], mat['subjects']
    n_sources = xyz.shape[0]

    # Generate random data and random connectivity
    data = np.random.uniform(low=-1., high=1., size=(n_sources,))
    conn = np.triu(np.random.uniform(-1., 1., (n_sources, n_sources)))
    conn_select = (-.005 < conn) & (conn < .005)

    # Scene creation
    sc = SceneObj()



.. GENERATED FROM PYTHON SOURCE LINES 35-38

Animate a single brain object
##############################################################################
 Here we set an animation for a single brain object.

.. GENERATED FROM PYTHON SOURCE LINES 38-43

.. code-block:: Python


    b_obj_1 = BrainObj('inflated', translucent=False)
    b_obj_1.animate()
    sc.add_to_subplot(b_obj_1, rotate='left', title='Animate a single object')


.. GENERATED FROM PYTHON SOURCE LINES 44-47

Animate multiple objects
##############################################################################
 Here we animate multiple objects inside a subplot

.. GENERATED FROM PYTHON SOURCE LINES 47-56

.. code-block:: Python


    s_obj_1 = SourceObj('s1', xyz, data=data)
    b_obj_2 = BrainObj('white')
    b_obj_2.animate()

    sc.add_to_subplot(s_obj_1, row=1, title='Animate multiple objects')
    sc.add_to_subplot(b_obj_2, row=1, rotate='right', use_this_cam=True)



.. GENERATED FROM PYTHON SOURCE LINES 57-61

Animate sources
##############################################################################
 Previous subplots are using the brain object. But every 3D objects in
 Visbrain can also be animated. We illustrate this with a source object

.. GENERATED FROM PYTHON SOURCE LINES 61-76

.. code-block:: Python


    # Define connectivity links and sources
    c_obj_1 = ConnectObj('c1', xyz, conn, select=conn_select, dynamic=(0., 1.),
                         dynamic_orientation='center', dynamic_order=3, cmap='bwr',
                         antialias=True)
    s_obj_2 = SourceObj('s2', xyz, data=data, radius_min=5., radius_max=20)
    s_obj_2.color_sources(data=data, cmap='inferno')

    # Animate sources
    s_obj_2.animate()

    # Add objects to the scene
    sc.add_to_subplot(c_obj_1, col=1, title='Animate a source object')
    sc.add_to_subplot(s_obj_2, col=1, rotate='front', use_this_cam=True, zoom=.7)


.. GENERATED FROM PYTHON SOURCE LINES 77-81

Configure the animation rate
##############################################################################
 Here, we configure animations so that there's a 60° rotation update every
 second

.. GENERATED FROM PYTHON SOURCE LINES 81-98

.. code-block:: Python


    # Define a connectivity object and a brain object :
    c_obj_2 = ConnectObj('c1', xyz, conn, select=conn_select, dynamic=(0., 1.),
                         dynamic_orientation='center', cmap='bwr', antialias=True)
    b_obj_3 = BrainObj('white')

    # Animate the brain with 10 iterations of 60° rotation update every second
    b_obj_3.animate(iterations=10, step=60, interval=1)

    # Add both objects to the scene and specify that we want to use the camera of
    # the brain object
    sc.add_to_subplot(c_obj_2, row=1, col=1,
                      title='1s refresh rate with a 60° rotation update')
    sc.add_to_subplot(b_obj_3, row=1, col=1, rotate='front',
                      use_this_cam=True)



.. GENERATED FROM PYTHON SOURCE LINES 99-103

Save the animation
##############################################################################
 Finally, the `visbrain.objects.SceneObj.record_animation` allows to export
 animations as a gif file

.. GENERATED FROM PYTHON SOURCE LINES 103-107

.. code-block:: Python


    # sc.record_animation('animate_example.gif', n_pic=10)

    sc.preview()


.. _sphx_glr_download_auto_examples_objects_plot_animate_scene.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_animate_scene.ipynb <plot_animate_scene.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_animate_scene.py <plot_animate_scene.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_animate_scene.zip <plot_animate_scene.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
